#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –°–ö–£–î —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import sqlite3
from datetime import datetime
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from real_skud_parser import parse_real_skud_line, create_real_skud_config

class SkudDatabaseIntegrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path="real_skud_data.db"):
        self.db_path = db_path
        self.connection = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = sqlite3.connect(self.db_path)
            self.connection.row_factory = sqlite3.Row
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def create_test_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if not self.connection:
            return False
            
        cursor = self.connection.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor.executescript('''
            CREATE TABLE IF NOT EXISTS departments (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL UNIQUE
            );
            
            CREATE TABLE IF NOT EXISTS positions (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL UNIQUE
            );
            
            CREATE TABLE IF NOT EXISTS employees (
                id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL UNIQUE,
                department_id INTEGER,
                position_id INTEGER,
                card_number TEXT,
                is_active INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (department_id) REFERENCES departments(id),
                FOREIGN KEY (position_id) REFERENCES positions(id)
            );
            
            CREATE TABLE IF NOT EXISTS access_logs (
                id INTEGER PRIMARY KEY,
                employee_id INTEGER NOT NULL,
                access_datetime TEXT NOT NULL,
                access_type TEXT NOT NULL CHECK (access_type IN ('–í–•–û–î', '–í–´–•–û–î', 'IN', 'OUT')),
                door_location TEXT,
                card_number TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (employee_id) REFERENCES employees(id),
                UNIQUE(employee_id, access_datetime, door_location)
            );
        ''')
        
        self.connection.commit()
        return True
    
    def get_or_create_unknown_ids(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç ID –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        cursor = self.connection.cursor()
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ª—É–∂–±—É "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        cursor.execute("SELECT id FROM departments WHERE name = ?", ("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",))
        dept = cursor.fetchone()
        if not dept:
            cursor.execute("INSERT INTO departments (name) VALUES (?)", ("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",))
            dept_id = cursor.lastrowid
            print("‚ûï –°–æ–∑–¥–∞–Ω–∞ —Å–ª—É–∂–±–∞ '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'")
        else:
            dept_id = dept[0]
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        cursor.execute("SELECT id FROM positions WHERE name = ?", ("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",))
        pos = cursor.fetchone()
        if not pos:
            cursor.execute("INSERT INTO positions (name) VALUES (?)", ("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",))
            pos_id = cursor.lastrowid
            print("‚ûï –°–æ–∑–¥–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'")
        else:
            pos_id = pos[0]
        
        self.connection.commit()
        return dept_id, pos_id
    
    def get_or_create_employee(self, full_name, card_number=None):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ"""
        cursor = self.connection.cursor()
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute("SELECT id FROM employees WHERE full_name = ?", (full_name,))
        employee = cursor.fetchone()
        
        if employee:
            employee_id = employee[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
            if card_number and card_number.strip():
                cursor.execute(
                    "UPDATE employees SET card_number = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? AND (card_number IS NULL OR card_number = '')",
                    (card_number, employee_id)
                )
                self.connection.commit()
            
            return employee_id
        else:
            # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            dept_id, pos_id = self.get_or_create_unknown_ids()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–æ–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
            cursor.execute("""
                INSERT INTO employees (full_name, department_id, position_id, card_number, is_active)
                VALUES (?, ?, ?, ?, 1)
            """, (full_name, dept_id, pos_id, card_number or ''))
            
            employee_id = cursor.lastrowid
            self.connection.commit()
            
            print(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {full_name} (ID: {employee_id}) —Å–æ —Å–ª—É–∂–±–æ–π/–¥–æ–ª–∂–Ω–æ—Å—Ç—å—é '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'")
            return employee_id
    
    def is_duplicate_access_log(self, employee_id, access_datetime, door_location):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–∞"""
        cursor = self.connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–µ–∫—É–Ω–¥—ã
        cursor.execute("""
            SELECT id FROM access_logs 
            WHERE employee_id = ? 
            AND access_datetime = ? 
            AND door_location = ?
        """, (employee_id, access_datetime.strftime('%Y-%m-%d %H:%M:%S'), door_location))
        
        return cursor.fetchone() is not None
    
    def add_access_log(self, skud_record):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee_id = self.get_or_create_employee(
                skud_record.full_name, 
                skud_record.card_number
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if self.is_duplicate_access_log(
                employee_id, 
                skud_record.timestamp, 
                skud_record.door_location
            ):
                return False  # –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            cursor = self.connection.cursor()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç CHECK constraint –≤ –ë–î
            if skud_record.direction == "–≤—Ö–æ–¥":
                access_type = "–í–•–û–î"
            elif skud_record.direction == "–≤—ã—Ö–æ–¥":
                access_type = "–í–´–•–û–î"
            else:
                access_type = "–í–•–û–î"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–∞
            cursor.execute("""
                INSERT INTO access_logs (
                    employee_id, 
                    access_datetime, 
                    access_type, 
                    door_location, 
                    card_number
                ) VALUES (?, ?, ?, ?, ?)
            """, (
                employee_id,
                skud_record.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                access_type,
                skud_record.door_location,
                skud_record.card_number or ''
            ))
            
            self.connection.commit()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
    
    def import_from_file(self, file_path, limit=None, config_file=None):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –°–ö–£–î"""
        
        if not self.connect():
            return False
        
        print(f"üìÇ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        config_path = config_file or "real_skud_config.ini"
        config = create_real_skud_config(config_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if config.get('exclude_employees'):
            print(f"üö´ –ò—Å–∫–ª—é—á–∞—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {', '.join(config['exclude_employees'])}")
        if config.get('exclude_doors'):
            print(f"üö´ –ò—Å–∫–ª—é—á–∞—é—Ç—Å—è –¥–≤–µ—Ä–∏: {', '.join(config['exclude_doors'])}")
        
        total_lines = 0
        new_records = 0
        duplicates = 0
        errors = 0
        new_employees = 0
        filtered_employees = 0
        filtered_doors = 0
        
        try:
            with open(file_path, 'r', encoding='windows-1251') as f:
                for line_num, line in enumerate(f, 1):
                    total_lines += 1
                    
                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if limit and new_records >= limit:
                        break
                    
                    line = line.strip()
                    if not line:
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É
                    skud_record = parse_real_skud_line(line, line_num, config)
                    
                    if skud_record:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
                        cursor = self.connection.cursor()
                        cursor.execute("SELECT id FROM employees WHERE full_name = ?", (skud_record.full_name,))
                        existing_employee = cursor.fetchone()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        if self.add_access_log(skud_record):
                            new_records += 1
                            
                            # –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                            if not existing_employee:
                                new_employees += 1
                            
                            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
                            if new_records % 1000 == 0:
                                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {new_records} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {total_lines} —Å—Ç—Ä–æ–∫")
                        else:
                            duplicates += 1
                    else:
                        errors += 1
            
            print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_lines}")
            print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞: {new_records}")
            print(f"üë• –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {new_employees}")
            print(f"üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
            print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {errors}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False
        finally:
            if self.connection:
                self.connection.close()
    
    def get_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞"""
        if not self.connect():
            return
        
        cursor = self.connection.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM employees")
        total_employees = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM access_logs")
        total_access_logs = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            SELECT al.access_datetime, e.full_name, al.access_type, al.door_location
            FROM access_logs al
            JOIN employees e ON al.employee_id = e.id
            ORDER BY al.access_datetime DESC
            LIMIT 5
        """)
        recent_logs = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∑–∞–ø–∏—Å—è–º
        today = datetime.now().date()
        cursor.execute("""
            SELECT COUNT(*) FROM access_logs 
            WHERE DATE(access_datetime) = ?
        """, (today,))
        today_logs = cursor.fetchone()[0]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {total_employees}")
        print(f"üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞: {total_access_logs}")
        print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_logs}")
        
        print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        for i, (timestamp, name, access_type, door) in enumerate(recent_logs, 1):
            print(f"   {i}. {timestamp} - {name} - {access_type} - {door}")
        
        self.connection.close()
    
    def process_skud_file(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –°–ö–£–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è API"""
        
        if not self.connect():
            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }
        
        print(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = "real_skud_config.ini"
        config = create_real_skud_config(config_path)
        
        total_lines = 0
        new_records = 0
        duplicates = 0
        errors = 0
        new_employees = 0
        
        try:
            with open(file_path, 'r', encoding='windows-1251') as f:
                for line_num, line in enumerate(f, 1):
                    total_lines += 1
                    
                    line = line.strip()
                    if not line:
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É
                    skud_record = parse_real_skud_line(line, line_num, config)
                    
                    if skud_record:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
                        cursor = self.connection.cursor()
                        cursor.execute("SELECT id FROM employees WHERE full_name = ?", (skud_record.full_name,))
                        existing_employee = cursor.fetchone()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        if self.add_access_log(skud_record):
                            new_records += 1
                            
                            # –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                            if not existing_employee:
                                new_employees += 1
                        else:
                            duplicates += 1
                    else:
                        errors += 1
            
            result = {
                'success': True,
                'processed_lines': total_lines,
                'new_access_records': new_records,
                'new_employees': new_employees,
                'duplicates': duplicates,
                'errors': errors
            }
            
            print(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {new_records} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, {new_employees} –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
        finally:
            if self.connection:
                self.connection.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    integrator = SkudDatabaseIntegrator()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –∏–º–ø–æ—Ä—Ç–∞:")
    integrator.get_statistics()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    file_path = "processed_real_skud/2025.08.19.txt"
    
    print(f"\nüîÑ –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–≤—ã—Ö 100 –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞...")
    success = integrator.import_from_file(file_path, limit=100)
    
    if success:
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–∞:")
        integrator.get_statistics()
    else:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    main()