services:
  postgres:
    image: postgres:15
    container_name: skud-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: skud_db
      POSTGRES_USER: skud_user
      POSTGRES_PASSWORD: your_strong_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - skud-network
  # Backend API сервис
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: skud-backend
    restart: unless-stopped
    networks:
      - skud-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # Монтируем базу данных SQLite для fallback
      - ./real_skud_data.db:/app/real_skud_data.db
      # Монтируем конфигурации
      - ./real_skud_config.ini:/app/real_skud_config.ini
      - ./postgres_config.ini:/app/postgres_config.ini
      # Монтируем директории для загрузки данных
      - ./data_input:/app/data_input
      - ./uploads:/app/uploads
    environment:
      - PYTHONUNBUFFERED=1

  # Frontend сервис
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: skud-frontend
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=/api
    depends_on:
      - backend
      - postgres
    networks:
      - skud-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: skud-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
      - postgres
    networks:
      - skud-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  skud-network:
    driver: bridge
volumes:
  postgres_data: