#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–ö–£–î
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥–µ–ª—ã
"""

import sqlite3
from datetime import datetime

class EmployeeEditor:
    """–†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    def __init__(self, db_path="real_skud_data.db"):
        self.db_path = db_path
    
    def list_employees(self, limit=20):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, full_name, position, department 
            FROM employees 
            ORDER BY full_name 
            LIMIT ?
        """, (limit,))
        
        employees = cursor.fetchall()
        
        print(f"{'ID':<4} {'–§–ò–û':<30} {'–î–æ–ª–∂–Ω–æ—Å—Ç—å':<25} {'–û—Ç–¥–µ–ª':<20}")
        print("-" * 80)
        
        for emp_id, name, position, department in employees:
            pos_str = position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            dept_str = department or "–ù–µ —É–∫–∞–∑–∞–Ω–æ" 
            print(f"{emp_id:<4} {name[:29]:<30} {pos_str[:24]:<25} {dept_str[:19]:<20}")
        
        conn.close()
        return employees
    
    def search_employee(self, search_term):
        """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, full_name, position, department 
            FROM employees 
            WHERE full_name LIKE ? 
            ORDER BY full_name
        """, (f"%{search_term}%",))
        
        return cursor.fetchall()
    
    def update_employee(self, emp_id, position=None, department=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute("SELECT full_name FROM employees WHERE id = ?", (emp_id,))
        employee = cursor.fetchone()
        
        if not employee:
            print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {emp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        updates = []
        params = []
        
        if position is not None:
            updates.append("position = ?")
            params.append(position)
        
        if department is not None:
            updates.append("department = ?")
            params.append(department)
        
        if updates:
            updates.append("updated_at = ?")
            params.append(datetime.now().isoformat())
            params.append(emp_id)
            
            sql = f"UPDATE employees SET {', '.join(updates)} WHERE id = ?"
            cursor.execute(sql, params)
            conn.commit()
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee[0]} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("SELECT position, department FROM employees WHERE id = ?", (emp_id,))
            new_data = cursor.fetchone()
            print(f"   –î–æ–ª–∂–Ω–æ—Å—Ç—å: {new_data[0] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"   –û—Ç–¥–µ–ª: {new_data[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        
        conn.close()
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    
    editor = EmployeeEditor()
    
    print("üë• –†–ï–î–ê–ö–¢–û–† –î–ê–ù–ù–´–• –°–û–¢–†–£–î–ù–ò–ö–û–í –°–ö–£–î")
    print("=" * 50)
    
    while True:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print("2. –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        print("3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        print("4. –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                limit = input("–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ").strip()
                limit = int(limit) if limit.isdigit() else 20
                editor.list_employees(limit)
            
            elif choice == "2":
                search_term = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
                if search_term:
                    results = editor.search_employee(search_term)
                    if results:
                        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(results)}")
                        print(f"{'ID':<4} {'–§–ò–û':<30} {'–î–æ–ª–∂–Ω–æ—Å—Ç—å':<25} {'–û—Ç–¥–µ–ª':<20}")
                        print("-" * 80)
                        for emp_id, name, position, department in results:
                            pos_str = position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                            dept_str = department or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                            print(f"{emp_id:<4} {name[:29]:<30} {pos_str[:24]:<25} {dept_str[:19]:<20}")
                    else:
                        print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            elif choice == "3":
                emp_id = input("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ").strip()
                if emp_id.isdigit():
                    emp_id = int(emp_id)
                    
                    position = input("–ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å (Enter - –Ω–µ –º–µ–Ω—è—Ç—å): ").strip()
                    department = input("–ù–æ–≤—ã–π –æ—Ç–¥–µ–ª (Enter - –Ω–µ –º–µ–Ω—è—Ç—å): ").strip()
                    
                    position = position if position else None
                    department = department if department else None
                    
                    if position or department:
                        editor.update_employee(emp_id, position, department)
                    else:
                        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            
            elif choice == "4":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
