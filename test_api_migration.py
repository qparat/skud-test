#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ API –Ω–∞ PostgreSQL
"""

import sys
import os
import configparser
import psycopg2
import sqlite3
from contextlib import contextmanager

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ clean_api
from clean_api import get_db_connection, execute_query

def test_postgresql_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    try:
        conn = get_db_connection()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {conn.db_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        tables_to_check = ['employees', 'departments', 'positions', 'access_logs']
        
        for table in tables_to_check:
            try:
                if conn.db_type == "postgresql":
                    result = execute_query(
                        conn,
                        """
                        SELECT COUNT(*) as count 
                        FROM information_schema.tables 
                        WHERE table_name = ?
                        """,
                        (table,),
                        fetch_one=True
                    )
                    exists = result['count'] > 0
                else:
                    # SQLite
                    cursor = conn.cursor()
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,))
                    exists = cursor.fetchone() is not None
                
                print(f"  {'‚úÖ' if exists else '‚ùå'} –¢–∞–±–ª–∏—Ü–∞ {table}: {'–Ω–∞–π–¥–µ–Ω–∞' if exists else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_api_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã API"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ API...")
    
    try:
        conn = get_db_connection()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {conn.db_type}")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        try:
            results = execute_query(
                conn,
                """
                SELECT COUNT(*) as count 
                FROM employees 
                WHERE is_active = ?
                """,
                (True,),
                fetch_one=True
            )
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {results['count']}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤
        print("\nüè¢ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤")
        try:
            results = execute_query(
                conn,
                "SELECT COUNT(*) as count FROM departments",
                fetch_one=True
            )
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤: {results['count']}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–∞
        print("\nüìä –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–∞")
        try:
            results = execute_query(
                conn,
                "SELECT COUNT(*) as count FROM access_logs",
                fetch_one=True
            )
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤: {results['count']}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 4: JOIN –∑–∞–ø—Ä–æ—Å (–∞–Ω–∞–ª–æ–≥ employee-schedule)
        print("\nüîó –¢–µ—Å—Ç 4: JOIN –∑–∞–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ + –ª–æ–≥–∏")
        try:
            results = execute_query(
                conn,
                """
                SELECT COUNT(*) as count
                FROM access_logs al
                JOIN employees e ON al.employee_id = e.id
                WHERE e.is_active = ?
                """,
                (True,),
                fetch_one=True
            )
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å JOIN: {results['count']}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ postgres_config.ini
    if os.path.exists('postgres_config.ini'):
        print("  ‚úÖ postgres_config.ini –Ω–∞–π–¥–µ–Ω")
        
        config = configparser.ConfigParser()
        config.read('postgres_config.ini', encoding='utf-8')
        
        if config.has_section('DATABASE'):
            print("  ‚úÖ –°–µ–∫—Ü–∏—è [DATABASE] –Ω–∞–π–¥–µ–Ω–∞")
            host = config.get('DATABASE', 'host', fallback='–Ω–µ —É–∫–∞–∑–∞–Ω')
            database = config.get('DATABASE', 'database', fallback='–Ω–µ —É–∫–∞–∑–∞–Ω')
            print(f"    - Host: {host}")
            print(f"    - Database: {database}")
        else:
            print("  ‚ùå –°–µ–∫—Ü–∏—è [DATABASE] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("  ‚ùå postgres_config.ini –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite —Ñ–∞–π–ª–∞
    if os.path.exists('real_skud_data.db'):
        print("  ‚úÖ real_skud_data.db –Ω–∞–π–¥–µ–Ω")
    else:
        print("  ‚ùå real_skud_data.db –ù–ï –ù–ê–ô–î–ï–ù")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò API –ù–ê POSTGRESQL")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    test_configuration()
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection_ok = test_postgresql_connection()
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å—ã API
    if connection_ok:
        test_api_queries()
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    main()