#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–ö–£–î —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
"""

import sqlite3
import os
from datetime import datetime, date, timedelta
from skud_monitor import SkudMonitor

def show_available_dates():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("real_skud_data.db")
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT access_date, COUNT(*) as records_count
        FROM access_logs 
        GROUP BY access_date 
        ORDER BY access_date DESC
    """)
    
    dates = cursor.fetchall()
    conn.close()
    
    print("\nüìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 40)
    for i, (date_str, count) in enumerate(dates, 1):
        print(f"{i:2d}. {date_str} ({count:,} –∑–∞–ø–∏—Å–µ–π)")
    
    return dates

def get_date_choice(available_dates):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (1-{len(available_dates)}) –∏–ª–∏ Enter –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π: ").strip()
            
            if choice == "":
                return available_dates[0][0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(available_dates):
                return available_dates[choice_num - 1][0]
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(available_dates)}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            exit()

def show_detailed_report(target_date_str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ date –æ–±—ä–µ–∫—Ç
    target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
    
    monitor = SkudMonitor()
    
    print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ó–ê {target_date.strftime('%d.%m.%Y')}")
    print("=" * 70)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
    report = monitor.get_daily_report(target_date)
    if report:
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {report['total_employees']}")
        print(f"   ‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ: {report['employees_present']}")
        print(f"   üö™ –í—Å–µ–≥–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ —Ç—É—Ä–Ω–∏–∫–µ—Ç—ã: {report['total_entries']:,}")
        print(f"   üçΩÔ∏è  –û–±–µ–¥–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {report['lunch_breaks']}")
        print(f"   üåÖ –†–∞–Ω–Ω–∏—Ö –ø—Ä–∏—Ö–æ–¥–æ–≤ (–¥–æ 8:00): {report['early_arrivals']}")
        print(f"   üåô –ü–æ–∑–¥–Ω–∏—Ö —É—Ö–æ–¥–æ–≤ (–ø–æ—Å–ª–µ 18:00): {report['late_departures']}")
    
    # –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
    conn = sqlite3.connect("real_skud_data.db")
    cursor = conn.cursor()
    
    # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
    cursor.execute("""
        SELECT full_name, COUNT(*) as entries
        FROM access_logs 
        WHERE access_date = ?
        GROUP BY employee_id, full_name
        ORDER BY entries DESC
        LIMIT 5
    """, (target_date_str,))
    
    top_daily = cursor.fetchall()
    if top_daily:
        print(f"\nüèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å:")
        for i, (name, entries) in enumerate(top_daily, 1):
            print(f"   {i}. {name}: {entries} –ø—Ä–æ—Ö–æ–¥–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cursor.execute("""
        SELECT 
            CASE 
                WHEN TIME(access_time) < '09:00:00' THEN '–†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ (–¥–æ 9:00)'
                WHEN TIME(access_time) < '12:00:00' THEN '–£—Ç—Ä–æ (9:00-12:00)'
                WHEN TIME(access_time) < '14:00:00' THEN '–û–±–µ–¥ (12:00-14:00)'
                WHEN TIME(access_time) < '18:00:00' THEN '–î–µ–Ω—å (14:00-18:00)'
                ELSE '–í–µ—á–µ—Ä (–ø–æ—Å–ª–µ 18:00)'
            END as time_period,
            COUNT(*) as entries
        FROM access_logs 
        WHERE access_date = ?
        GROUP BY time_period
        ORDER BY entries DESC
    """, (target_date_str,))
    
    time_stats = cursor.fetchall()
    if time_stats:
        print(f"\n‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:")
        for period, entries in time_stats:
            print(f"   {period}: {entries:,} –ø—Ä–æ—Ö–æ–¥–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞–º
    cursor.execute("""
        SELECT door_location, COUNT(*) as entries
        FROM access_logs 
        WHERE access_date = ? AND door_location IS NOT NULL
        GROUP BY door_location
        ORDER BY entries DESC
    """, (target_date_str,))
    
    door_stats = cursor.fetchall()
    if door_stats:
        print(f"\nüö™ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞–º:")
        for door, entries in door_stats:
            print(f"   {door}: {entries:,} –ø—Ä–æ—Ö–æ–¥–æ–≤")
    
    conn.close()
    print("\n" + "=" * 70)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    print("üîç –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ –°–ö–£–î")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists("real_skud_data.db"):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    monitor = SkudMonitor()
    health = monitor.get_system_health()
    print(f"\nüè• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"   üìä –†–∞–∑–º–µ—Ä –ë–î: {health['database_size_mb']} MB")
    print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {health['backup_status']}")
    
    while True:
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
            available_dates = show_available_dates()
            
            if not available_dates:
                print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π!")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_date = get_date_choice(available_dates)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            show_detailed_report(selected_date)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–∏
            continue_choice = input("\nüîÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É? (y/N): ").strip().lower()
            if continue_choice not in ['y', 'yes', '–¥', '–¥–∞']:
                break
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
    
    print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    main()