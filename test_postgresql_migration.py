#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ SKUD —Å–∏—Å—Ç–µ–º—ã –Ω–∞ PostgreSQL
–ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
"""

import sys
import os
import traceback
from datetime import datetime

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ API
        from clean_api import get_db_connection, execute_query
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = get_db_connection()
        db_type = getattr(conn, 'db_type', 'unknown')
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {db_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
        if db_type == 'postgresql':
            tables = execute_query(
                conn,
                """
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
                """,
                fetch_all=True
            )
        else:
            tables = execute_query(
                conn,
                "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name",
                fetch_all=True
            )
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            table_name = table.get('table_name') or table.get('name')
            print(f"   - {table_name}")
        
        conn.close()
        return True, db_type
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        traceback.print_exc()
        return False, None

def test_data_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        from clean_api import get_db_connection, execute_query
        
        conn = get_db_connection()
        db_type = getattr(conn, 'db_type', 'unknown')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        tables_to_check = ['employees', 'departments', 'positions', 'access_logs']
        
        for table in tables_to_check:
            try:
                result = execute_query(
                    conn,
                    f"SELECT COUNT(*) as count FROM {table}",
                    fetch_one=True
                )
                count = result['count'] if result else 0
                print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"‚ö†Ô∏è  {table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ ({e})")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ SELECT –∑–∞–ø—Ä–æ—Å–∞
        try:
            employees = execute_query(
                conn,
                "SELECT id, full_name FROM employees LIMIT 5",
                fetch_all=True
            )
            print(f"üë• –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
            for emp in employees:
                print(f"   - ID: {emp['id']}, –ò–º—è: {emp['full_name']}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        traceback.print_exc()
        return False

def test_database_integrator():
    """–¢–µ—Å—Ç database_integrator"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ database_integrator...")
    
    try:
        from database_integrator import SkudDatabaseIntegrator
        
        # –¢–µ—Å—Ç PostgreSQL
        try:
            integrator_pg = SkudDatabaseIntegrator(db_type='postgresql')
            print("‚úÖ PostgreSQL integrator —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            conn = integrator_pg.get_connection()
            if conn:
                print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                conn.close()
            else:
                print("‚ùå PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  PostgreSQL integrator –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç SQLite fallback
        try:
            integrator_sqlite = SkudDatabaseIntegrator(db_type='sqlite')
            print("‚úÖ SQLite integrator —Å–æ–∑–¥–∞–Ω")
            
            conn = integrator_sqlite.get_connection()
            if conn:
                print("‚úÖ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                conn.close()
            else:
                print("‚ùå SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  SQLite integrator –æ—à–∏–±–∫–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ database_integrator: {e}")
        traceback.print_exc()
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from clean_api import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            response = client.get("/")
            print(f"üìÑ Root endpoint: {response.status_code}")
        except:
            print("üìÑ Root endpoint: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        try:
            response = client.get("/employees/simple")
            print(f"üë• Employees endpoint: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(data)}")
        except Exception as e:
            print(f"üë• Employees endpoint: –æ—à–∏–±–∫–∞ ({e})")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
        try:
            response = client.get("/departments")
            print(f"üè¢ Departments endpoint: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤: {len(data)}")
        except Exception as e:
            print(f"üè¢ Departments endpoint: –æ—à–∏–±–∫–∞ ({e})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        traceback.print_exc()
        return False

def test_config_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    config_files = [
        'postgres_config.ini',
        'real_skud_config.ini',
        'requirements.txt'
    ]
    
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úÖ {config_file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ö†Ô∏è  {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ postgres_config.ini
    try:
        import configparser
        config = configparser.ConfigParser()
        config.read('postgres_config.ini', encoding='utf-8')
        
        if config.has_section('DATABASE'):
            host = config.get('DATABASE', 'host', fallback='–Ω–µ —É–∫–∞–∑–∞–Ω')
            database = config.get('DATABASE', 'database', fallback='–Ω–µ —É–∫–∞–∑–∞–Ω')
            user = config.get('DATABASE', 'user', fallback='–Ω–µ —É–∫–∞–∑–∞–Ω')
            print(f"üêò PostgreSQL –∫–æ–Ω—Ñ–∏–≥: {user}@{host}/{database}")
        else:
            print("‚ö†Ô∏è  PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PostgreSQL –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ SKUD PostgreSQL Migration Test")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print("=" * 50)
    
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_config_files()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_success, db_type = test_database_connection()
    results.append(("Database Connection", db_success))
    
    if db_success:
        # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
        data_success = test_data_operations()
        results.append(("Data Operations", data_success))
        
        # –¢–µ—Å—Ç database_integrator
        integrator_success = test_database_integrator()
        results.append(("Database Integrator", integrator_success))
        
        # –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        api_success = test_api_endpoints()
        results.append(("API Endpoints", api_success))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
    
    total_tests = len(results)
    passed_tests = sum(1 for _, success in results if success)
    
    print("-" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    
    if db_type:
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_type}")
    
    if passed_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)