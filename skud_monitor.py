#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –°–ö–£–î
"""

import sqlite3
import os
import logging
from datetime import datetime, date, timedelta
from pathlib import Path

class SkudMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î"""
    
    def __init__(self, db_path: str = "real_skud_data.db"):
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)
    
    def get_daily_report(self, target_date: date = None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        
        if target_date is None:
            target_date = date.today()
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            report = {
                'date': target_date.strftime('%d.%m.%Y'),
                'total_employees': 0,
                'employees_present': 0,
                'total_entries': 0,
                'lunch_breaks': 0,
                'early_arrivals': 0,
                'late_departures': 0
            }
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            cursor.execute("SELECT COUNT(*) FROM employees")
            report['total_employees'] = cursor.fetchone()[0]
            
            # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute("""
                SELECT COUNT(DISTINCT employee_id) 
                FROM access_logs 
                WHERE DATE(access_datetime) = ?
            """, (target_date,))
            report['employees_present'] = cursor.fetchone()[0] or 0
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤
            cursor.execute("""
                SELECT COUNT(*) 
                FROM access_logs 
                WHERE DATE(access_datetime) = ?
            """, (target_date,))
            report['total_entries'] = cursor.fetchone()[0] or 0
            
            # –û–±–µ–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
            cursor.execute("""
                SELECT COUNT(*) 
                FROM lunch_breaks 
                WHERE break_date = ?
            """, (target_date,))
            report['lunch_breaks'] = cursor.fetchone()[0] or 0
            
            # –†–∞–Ω–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥—ã (–¥–æ 8:00)
            cursor.execute("""
                SELECT COUNT(DISTINCT employee_id)
                FROM daily_summary 
                WHERE work_date = ? 
                AND TIME(first_entry_time) < '08:00:00'
            """, (target_date,))
            report['early_arrivals'] = cursor.fetchone()[0] or 0
            
            # –ü–æ–∑–¥–Ω–∏–µ —É—Ö–æ–¥—ã (–ø–æ—Å–ª–µ 18:00)
            cursor.execute("""
                SELECT COUNT(DISTINCT employee_id)
                FROM daily_summary 
                WHERE work_date = ? 
                AND TIME(last_exit_time) > '18:00:00'
            """, (target_date,))
            report['late_departures'] = cursor.fetchone()[0] or 0
            
            return report
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
        finally:
            conn.close()
    
    def get_top_employees(self, days: int = 7):
        """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        start_date = date.today() - timedelta(days=days)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute("""
                SELECT 
                    e.full_name,
                    COUNT(al.id) as total_entries,
                    COUNT(DISTINCT DATE(al.access_datetime)) as days_present
                FROM employees e
                JOIN access_logs al ON e.id = al.employee_id
                WHERE DATE(al.access_datetime) >= ?
                GROUP BY e.id, e.full_name
                ORDER BY total_entries DESC
                LIMIT 10
            """, (start_date,))
            
            return cursor.fetchall()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
            return []
        finally:
            conn.close()
    
    def get_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        
        health = {
            'database_status': 'OK',
            'database_size_mb': 0,
            'last_file_processed': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'processing_errors': 0,
            'backup_status': 'OK'
        }
        
        try:
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if os.path.exists(self.db_path):
                health['database_size_mb'] = round(os.path.getsize(self.db_path) / (1024 * 1024), 2)
            else:
                health['database_status'] = '–§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω'
                return health
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            cursor.execute("""
                SELECT filename, processed_at 
                FROM files_metadata 
                ORDER BY processed_at DESC 
                LIMIT 1
            """)
            result = cursor.fetchone()
            if result:
                health['last_file_processed'] = f"{result[0]} ({result[1]})"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            backup_dir = Path("backups")
            if backup_dir.exists():
                backups = list(backup_dir.glob("skud_backup_*.db"))
                if not backups:
                    health['backup_status'] = '–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π'
                else:
                    latest_backup = max(backups, key=lambda p: p.stat().st_mtime)
                    backup_age = datetime.now() - datetime.fromtimestamp(latest_backup.stat().st_mtime)
                    if backup_age.days > 1:
                        health['backup_status'] = f'–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –±—ç–∫–∞–ø ({backup_age.days} –¥–Ω–µ–π)'
            else:
                health['backup_status'] = '–ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            
            conn.close()
            
        except Exception as e:
            health['database_status'] = f'–û—à–∏–±–∫–∞: {e}'
        
        return health
    
    def print_dashboard(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–∞—à–±–æ—Ä–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        
        print("üìä –°–ö–£–î Dashboard")
        print("=" * 60)
        
        # –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
        today_report = self.get_daily_report()
        if today_report:
            print(f"\nüìÖ –û—Ç—á–µ—Ç –∑–∞ {today_report['date']}:")
            print(f"   –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {today_report['total_employees']}")
            print(f"   –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏: {today_report['employees_present']}")
            print(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ö–æ–¥–æ–≤: {today_report['total_entries']}")
            print(f"   –û–±–µ–¥–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {today_report['lunch_breaks']}")
            print(f"   –†–∞–Ω–Ω–∏—Ö –ø—Ä–∏—Ö–æ–¥–æ–≤: {today_report['early_arrivals']}")
            print(f"   –ü–æ–∑–¥–Ω–∏—Ö —É—Ö–æ–¥–æ–≤: {today_report['late_departures']}")
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health = self.get_system_health()
        print(f"\nüè• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {health['database_status']}")
        print(f"   –†–∞–∑–º–µ—Ä –ë–î: {health['database_size_mb']} MB")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {health['last_file_processed']}")
        print(f"   –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {health['backup_status']}")
        
        # –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        top_employees = self.get_top_employees()
        if top_employees:
            print(f"\nüèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (7 –¥–Ω–µ–π):")
            for i, (name, entries, days) in enumerate(top_employees[:5], 1):
                print(f"   {i}. {name}: {entries} –ø—Ä–æ—Ö–æ–¥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π")
        
        print("\n" + "=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    logging.basicConfig(level=logging.INFO)
    
    monitor = SkudMonitor()
    monitor.print_dashboard()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    print("\nüìà –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
    for i in range(7):
        target_date = date.today() - timedelta(days=i)
        report = monitor.get_daily_report(target_date)
        if report and report['employees_present'] > 0:
            print(f"   {report['date']}: {report['employees_present']} —Å–æ—Ç—Ä., {report['total_entries']} –ø—Ä–æ—Ö–æ–¥–æ–≤")

if __name__ == "__main__":
    main()