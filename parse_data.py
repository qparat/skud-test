#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–†–û–°–¢–û–ô –ü–ê–†–°–ï–† –î–ê–ù–ù–´–• –°–ö–£–î
–ü—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏ txt —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É data_input –∏ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
"""

import time
import os
from pathlib import Path
from database_integrator import SkudDatabaseIntegrator

def main():
    print("üîç –°–ö–£–î –ü–∞—Ä—Å–µ—Ä - –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    input_folder = Path("data_input")
    processed_folder = Path("processed_real_skud")
    processed_folder.mkdir(exist_ok=True)
    
    # –ò—â–µ–º txt —Ñ–∞–π–ª—ã
    txt_files = list(input_folder.glob("*.txt"))
    
    if not txt_files:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø–∞–ø–∫–µ data_input")
        print("üìÅ –ü–æ–ª–æ–∂–∏ txt —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data_input –∏ –∑–∞–ø—É—Å—Ç–∏ —Å–Ω–æ–≤–∞")
        input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(txt_files)}")
    for file in txt_files:
        print(f"   üìÑ {file.name}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    integrator = SkudDatabaseIntegrator()
    if not integrator.connect():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    integrator.get_statistics()
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(txt_files)} —Ñ–∞–π–ª–∞(–æ–≤)...")
    
    total_new_records = 0
    total_time = 0
    
    for txt_file in txt_files:
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {txt_file.name}")
        start_time = time.time()
        
        try:
            success = integrator.import_from_file(str(txt_file))
            end_time = time.time()
            processing_time = end_time - start_time
            total_time += processing_time
            
            if success:
                print(f"   ‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫")
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ processed
                processed_file = processed_folder / txt_file.name
                if processed_file.exists():
                    processed_file.unlink()  # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                txt_file.rename(processed_file)
                print(f"   üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤: processed_real_skud/{txt_file.name}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    integrator.get_statistics()
    
    integrator.connection.close()
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.2f} —Å–µ–∫")
    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É")
    print(f"   üåê –î–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
    print("\n‚úÖ –ì–û–¢–û–í–û! –ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ.")
    
    input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()