#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–∏–Ω—É—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–ö–£–î –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂–∏–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
"""

import sqlite3
import os
import time
import threading
from datetime import datetime, date, timedelta
from pathlib import Path
import sys

class RealTimeSkudMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –°–ö–£–î –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω—É—Ç–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, db_path: str = "real_skud_data.db"):
        self.db_path = db_path
        self.running = False
        self.last_update = None
        self.stats_cache = {}
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def get_current_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        if not os.path.exists(self.db_path):
            return None
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            stats = {
                'timestamp': datetime.now(),
                'db_size_mb': round(os.path.getsize(self.db_path) / (1024 * 1024), 2),
                'total_employees': 0,
                'total_records': 0,
                'date_range': {'min': None, 'max': None},
                'last_activity': None,
                'today_activity': 0,
                'recent_entries': [],
                'daily_summary': {}
            }
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cursor.execute("SELECT COUNT(*) FROM employees")
            stats['total_employees'] = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM access_logs")
            stats['total_records'] = cursor.fetchone()[0]
            
            # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            cursor.execute("SELECT MIN(access_date), MAX(access_date) FROM access_logs")
            min_date, max_date = cursor.fetchone()
            stats['date_range']['min'] = min_date
            stats['date_range']['max'] = max_date
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cursor.execute("""
                SELECT full_name, access_datetime, access_type, door_location
                FROM access_logs 
                ORDER BY access_datetime DESC 
                LIMIT 1
            """)
            last_record = cursor.fetchone()
            if last_record:
                stats['last_activity'] = {
                    'name': last_record[0],
                    'datetime': last_record[1],
                    'type': last_record[2],
                    'door': last_record[3]
                }
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            cursor.execute("""
                SELECT COUNT(*) FROM access_logs 
                WHERE DATE(access_datetime) = ?
            """, (today,))
            stats['today_activity'] = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ø 10)
            cursor.execute("""
                SELECT full_name, access_datetime, access_type, door_location
                FROM access_logs 
                ORDER BY access_datetime DESC 
                LIMIT 10
            """)
            stats['recent_entries'] = cursor.fetchall()
            
            # –°–≤–æ–¥–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏)
            cursor.execute("""
                SELECT 
                    access_date, 
                    COUNT(*) as total_entries,
                    COUNT(DISTINCT employee_id) as unique_employees,
                    COUNT(CASE WHEN access_type = '–í–•–û–î' THEN 1 END) as entries,
                    COUNT(CASE WHEN access_type = '–í–´–•–û–î' THEN 1 END) as exits
                FROM access_logs 
                GROUP BY access_date 
                ORDER BY access_date DESC 
                LIMIT 7
            """)
            
            daily_data = cursor.fetchall()
            for row in daily_data:
                stats['daily_summary'][row[0]] = {
                    'total': row[1],
                    'employees': row[2], 
                    'entries': row[3],
                    'exits': row[4]
                }
            
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
        finally:
            conn.close()
    
    def display_dashboard(self, stats):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not stats:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        self.clear_screen()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("üî¥ –°–ö–£–î –ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        print("=" * 80)
        print(f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['timestamp'].strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"üíæ –†–∞–∑–º–µ—Ä –ë–î: {stats['db_size_mb']} MB")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 40)
        print(f"üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['total_employees']:,}")
        print(f"üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']:,}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {stats['date_range']['min']} ‚Äî {stats['date_range']['max']}")
        print(f"üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_activity']} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        print(f"\nüïê –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
        print("-" * 40)
        if stats['last_activity']:
            last = stats['last_activity']
            print(f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {last['name']}")
            print(f"üìÖ –í—Ä–µ–º—è: {last['datetime']}")
            print(f"üö™ –î–µ–π—Å—Ç–≤–∏–µ: {last['type']} —á–µ—Ä–µ–∑ {last['door'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        else:
            print("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï 10 –ó–ê–ü–ò–°–ï–ô:")
        print("-" * 80)
        if stats['recent_entries']:
            print(f"{'‚Ññ':<3} {'–°–æ—Ç—Ä—É–¥–Ω–∏–∫':<25} {'–í—Ä–µ–º—è':<20} {'–î–µ–π—Å—Ç–≤–∏–µ':<8} {'–ú–µ—Å—Ç–æ':<15}")
            print("-" * 80)
            for i, (name, dt, action, door) in enumerate(stats['recent_entries'], 1):
                door_short = (door or '')[:14]
                name_short = name[:24]
                dt_short = dt[:19] if dt else ''
                print(f"{i:<3} {name_short:<25} {dt_short:<20} {action:<8} {door_short:<15}")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –¥–Ω—è–º
        print(f"\nüìà –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú:")
        print("-" * 60)
        print(f"{'–î–∞—Ç–∞':<12} {'–ó–∞–ø–∏—Å–µ–π':<10} {'–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':<12} {'–í—Ö–æ–¥—ã':<8} {'–í—ã—Ö–æ–¥—ã':<8}")
        print("-" * 60)
        
        for date_str, summary in stats['daily_summary'].items():
            dt_formatted = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
            print(f"{dt_formatted:<12} {summary['total']:<10,} {summary['employees']:<12} "
                  f"{summary['entries']:<8} {summary['exits']:<8}")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        print(f"\nüè• –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
        backup_dir = Path("backups")
        backup_status = "‚ùå –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤"
        if backup_dir.exists():
            backups = list(backup_dir.glob("skud_backup_*.db"))
            if backups:
                latest_backup = max(backups, key=lambda p: p.stat().st_mtime)
                backup_time = datetime.fromtimestamp(latest_backup.stat().st_mtime)
                backup_age = datetime.now() - backup_time
                if backup_age.total_seconds() < 86400:  # –ú–µ–Ω–µ–µ —Å—É—Ç–æ–∫
                    backup_status = f"‚úÖ –°–≤–µ–∂–∏–π –±—ç–∫–∞–ø ({backup_age.seconds//3600}—á –Ω–∞–∑–∞–¥)"
                else:
                    backup_status = f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø ({backup_age.days} –¥–Ω–µ–π)"
        
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {backup_status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        main_log = Path("skud_processing.log")
        main_status = "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        if main_log.exists():
            log_time = datetime.fromtimestamp(main_log.stat().st_mtime)
            log_age = datetime.now() - log_time
            if log_age.total_seconds() < 300:  # –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
                main_status = "üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞"
            elif log_age.total_seconds() < 1800:  # –ú–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç
                main_status = "üü° –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
            else:
                main_status = "üî¥ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        print(f"üîÑ –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {main_status}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print(f"\nüí° –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("Ctrl+C - –≤—ã—Ö–æ–¥ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥...")
        
        print("=" * 80)
    
    def run_monitoring(self, update_interval: int = 60):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        self.running = True
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –°–ö–£–î (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {update_interval} —Å–µ–∫)")
        
        try:
            while self.running:
                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_current_stats()
                self.display_dashboard(stats)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for i in range(update_interval):
                    if not self.running:
                        break
                    time.sleep(1)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    remaining = update_interval - i - 1
                    if remaining > 0 and remaining % 10 == 0:
                        sys.stdout.write(f"\rüîÑ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫—É–Ω–¥...")
                        sys.stdout.flush()
        
        except KeyboardInterrupt:
            self.stop_monitoring()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.stop_monitoring()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False
        self.clear_screen()
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–ö–£–î –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω—É—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    print("üîç –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ò–ù–£–¢–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ö–£–î")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists("real_skud_data.db"):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'real_skud_data.db' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –°–ö–£–î –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = RealTimeSkudMonitor()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    print("1. –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60 —Å–µ–∫) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
    print("2. –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ - –±—ã—Å—Ç—Ä–æ")
    print("3. –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ")
    print("4. –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-4) –∏–ª–∏ Enter –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–≥–æ: ").strip()
        
        intervals = {'1': 60, '2': 30, '3': 10, '4': 5, '': 60}
        interval = intervals.get(choice, 60)
        
        print(f"\nüéØ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        
        monitor.run_monitoring(interval)
        
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()